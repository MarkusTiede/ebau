---

image: tmaier/docker-compose:latest

variables:
    LANG: C.UTF-8
    LC_ALL: C.UTF-8
    COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.ci.yml
    APPLICATION: demo

before_script:
    - mkdir /root/.docker
    - echo "$RUNNER_DOCKER_CAPEM" > /root/.docker/ca.pem
    - echo "$RUNNER_DOCKER_CERTPEM" > /root/.docker/cert.pem
    - echo "$RUNNER_DOCKER_KEYPEM" > /root/.docker/key.pem

stages:
    - test
    - build
    - deploy

test-ember:
    stage: test
    services:
        - docker:dind
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - sh -c "export CI_COMMIT_REF_SLUG=master; eval $COMPOSE pull --ignore-pull-failures --quiet ember"
        - eval $COMPOSE build --pull ember
        - eval $COMPOSE run --rm --no-deps ember yarn test

test-ember-caluma-portal:
    stage: test
    services:
        - docker:dind
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - sh -c "export CI_COMMIT_REF_SLUG=master; eval $COMPOSE pull --ignore-pull-failures --quiet ember-caluma-portal"
        - eval $COMPOSE build --pull ember-caluma-portal
        - eval $COMPOSE run --rm --no-deps ember-caluma-portal yarn test

test-django:
    stage: test
    services:
        - docker:dind
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - sh -c "export CI_COMMIT_REF_SLUG=master; eval $COMPOSE pull --ignore-pull-failures --quiet django db"
        - eval $COMPOSE up -d --build db clamav unoconv
        - eval $COMPOSE build --pull django
        - eval $COMPOSE run --rm --no-deps django make install-dev test


# TODO: This needs to reconfigured so it also works with kt_uri and kt_schwyz (See package.json).
lint:
  stage: test
  image:
    name: node:9
  script:
    - if git grep -I -e ä  -e ö  -e ü   -- './*' ':!.gitlab-ci.yml'; then exit 1; else echo "No composite umlaute found"; fi
    - cd php/public
    - npm install
    - npm run lint


symfony-security-checker:
    stage: test
    image:
        name: jakzal/phpqa:php7.3-alpine
    script: security-checker security:check ./php/composer.lock


.build-image:
    stage: build
    variables:
      CONTAINERS: ember django php db
    services:
        - docker:dind
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull --ignore-pull-failures --quiet $CONTAINERS
        - eval $COMPOSE build --pull
        - eval $COMPOSE push

build:
    extends: .build-image
    only:
        - master


build-kt_schwyz-stage:
    extends: .build-image
    variables:
        KEYCLOAK_URL: https://camac-schwyz.sycloud.ch/auth/
        APPLICATION: kt_schwyz
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml
    only:
        - stage


build-kt_uri-stage:
    extends: .build-image
    variables:
        APPLICATION: kt_uri
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml -f docker-compose.uri-stage.yml
        CONTAINERS: ember django php db iweb_mock
    only:
        - stage


build-kt_uri-production:
    extends: .build-image
    variables:
        APPLICATION: kt_uri
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml
    only:
        - production


.build-tarball:
    stage: build
    services:
        - docker:dind
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull --ignore-pull-failures --quiet ember django php db caluma
        - eval $COMPOSE build --pull
        - eval $COMPOSE up -d php django caluma
        # Create a minimal tarball which is deployable by
        # https://github.com/camac-suisse/ansible-role-camac
        - mkdir tarball && cd tarball
        - docker cp $(docker-compose ps -q php):/var/www/camac/kt_bern configuration/
        - docker cp $(docker-compose ps -q php):/var/www/camac/ camac/
        - cd camac
        - rm -rf kt_* demo media configuration php.* sessions 000-default.conf .prettier* .eslintrc.js .dockerignore Dockerfile docker-compose* .git .gitignore
        - cd ..
        - docker cp $(docker-compose ps -q django):/app django/
        - rm -rf django/kt_uri django/kt_schwyz django/demo
        - docker cp $(docker-compose ps -q caluma):/app caluma/
        - tar cvfz "../camac-be-${CI_COMMIT_REF_SLUG}.tar.gz" .
        - cd ..
    artifacts:
        paths:
          - "camac-be-${CI_COMMIT_REF_SLUG}.tar.gz"
        expire_in: 1 month


build-kt_bern-master:
  extends: .build-tarball
  only:
    - master


build-kt_bern-stage:
  extends: .build-tarball
  only:
    - stage


build-kt_bern-production:
  extends: .build-tarball
  only:
    - production


.deploy:
    variables:
        DOCKER_TLS_VERIFY: 1
        # because of https://github.com/docker/compose/issues/2668 tls certs
        # need to be assigned as parameters - once fixed such params can be removed.
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml --tlsverify --tlscert /root/.docker/cert.pem --tlskey /root/.docker/key.pem --tlscacert /root/.docker/ca.pem
    stage: deploy
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull
        - eval $COMPOSE up -d
    when: manual


deploy-kt_schwyz-stage:
    extends: .deploy
    environment:
        name: stage-kt_schwyz
        url: https://camac-schwyz.sycloud.ch/
    variables:
        APPLICATION: kt_schwyz
        DOCKER_HOST: vm-camac-webapp-stage-02.cust.adfinis-sygroup.ch:2376
    only:
        - stage


deploy-kt_uri-stage:
    extends: .deploy
    environment:
        name: stage-kt_uri
        url: https://camac-uri.sycloud.ch/
    variables:
        APPLICATION: kt_uri
        DOCKER_HOST: vm-camac-webapp-stage-01.cust.adfinis-sygroup.ch:2376
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml -f docker-compose.uri-stage.yml --tlsverify --tlscert /root/.docker/cert.pem --tlskey /root/.docker/key.pem --tlscacert /root/.docker/ca.pem
    after_script:
        - eval $COMPOSE stop keycloak
    only:
        - stage


# TODO: Test deploy
deploy-kt_bern-production:
  stage: deploy
  image:
    name: instrumentisto/rsync-ssh
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${PUBLISH_SSH_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
    - echo "${PUBLISH_SSH_PUBLIC_KEY}" > ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tUser ${PUBLISH_SSH_USERNAME}\n\tIdentityFile ~/.ssh/id_rsa" > ~/.ssh/config
    - echo "${PUBLISH_SSH_KNOWN_HOSTS}" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - "rsync ./camac-be-${CI_COMMIT_REF_SLUG}.tar.gz ${PUBLISH_RSYNC_TARGET}"
    - "sha256sum ./camac-be-${CI_COMMIT_REF_SLUG}.tar.gz"
  only:
    - production
  when: manual
