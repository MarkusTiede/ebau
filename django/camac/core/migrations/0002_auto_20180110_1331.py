# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-01-10 13:31
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('instance', '0001_initial'),
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='InstanceDemo',
            fields=[
                ('instance_demo', models.OneToOneField(db_column='INSTANCE_DEMO_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='instance.Instance')),
                ('value', models.CharField(blank=True, db_column='VALUE', max_length=1000, null=True)),
                ('automatic_date', models.DateTimeField(blank=True, db_column='AUTOMATIC_DATE', null=True)),
                ('form_date', models.DateTimeField(blank=True, db_column='FORM_DATE', null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_DEMO',
            },
        ),
        migrations.CreateModel(
            name='InstanceDemoLog',
            fields=[
                ('instance_demo_log_id', models.AutoField(db_column='INSTANCE_DEMO_LOG_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('user_id', models.IntegerField(db_column='USER_ID')),
                ('action', models.CharField(db_column='ACTION', max_length=500)),
                ('data', models.TextField(db_column='DATA')),
                ('id', models.IntegerField(db_column='ID')),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_DEMO_LOG',
            },
        ),
        migrations.CreateModel(
            name='InstanceFormPdf',
            fields=[
                ('instance_form_pdf_id', models.AutoField(db_column='INSTANCE_FORM_PDF_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('filename', models.CharField(db_column='FILENAME', max_length=50)),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_FORM_PDF',
            },
        ),
        migrations.CreateModel(
            name='InstanceGuest',
            fields=[
                ('instance', models.OneToOneField(db_column='INSTANCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='instance.Instance')),
                ('session_id', models.CharField(db_column='SESSION_ID', max_length=128)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_GUEST',
            },
        ),
        migrations.CreateModel(
            name='InstanceLocation',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_LOCATION',
            },
        ),
        migrations.CreateModel(
            name='InstanceLocationLog',
            fields=[
                ('instance_location_log_id', models.AutoField(db_column='INSTANCE_LOCATION_LOG_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('user_id', models.IntegerField(db_column='USER_ID')),
                ('action', models.CharField(db_column='ACTION', max_length=500)),
                ('data', models.TextField(blank=True, db_column='DATA', null=True)),
                ('id1', models.IntegerField(db_column='ID1')),
                ('field1', models.CharField(db_column='FIELD1', max_length=30)),
                ('id2', models.IntegerField(db_column='ID2')),
                ('field2', models.CharField(db_column='FIELD2', max_length=30)),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_LOCATION_LOG',
            },
        ),
        migrations.CreateModel(
            name='InstanceLog',
            fields=[
                ('instance_log_id', models.AutoField(db_column='INSTANCE_LOG_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('user_id', models.IntegerField(db_column='USER_ID')),
                ('action', models.CharField(db_column='ACTION', max_length=500)),
                ('data', models.TextField(blank=True, db_column='DATA', null=True)),
                ('id', models.IntegerField(db_column='ID')),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_LOG',
            },
        ),
        migrations.CreateModel(
            name='InstancePortal',
            fields=[
                ('instance_id', models.AutoField(db_column='INSTANCE_ID', primary_key=True, serialize=False)),
                ('portal_identifier', models.CharField(db_column='PORTAL_IDENTIFIER', max_length=256)),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_PORTAL',
            },
        ),
        migrations.CreateModel(
            name='InstanceResource',
            fields=[
                ('instance_resource_id', models.AutoField(db_column='INSTANCE_RESOURCE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
                ('template', models.CharField(blank=True, db_column='TEMPLATE', max_length=500, null=True)),
                ('class_field', models.CharField(blank=True, db_column='CLASS', max_length=25, null=True)),
                ('hidden', models.PositiveSmallIntegerField(db_column='HIDDEN')),
                ('sort', models.IntegerField(db_column='SORT')),
                ('form_group_id', models.FloatField(db_column='FORM_GROUP_ID')),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_RESOURCE',
            },
        ),
        migrations.CreateModel(
            name='InstanceResourceAction',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'INSTANCE_RESOURCE_ACTION',
            },
        ),
        migrations.CreateModel(
            name='IrEditcirculationSg',
            fields=[
                ('ir_editcirculation_sg_id', models.AutoField(db_column='IR_EDITCIRCULATION_SG_ID', primary_key=True, serialize=False)),
                ('localized', models.PositiveSmallIntegerField(db_column='LOCALIZED')),
            ],
            options={
                'managed': True,
                'db_table': 'IR_EDITCIRCULATION_SG',
            },
        ),
        migrations.CreateModel(
            name='IrEditletterAnswer',
            fields=[
                ('ir_editletter_answer_id', models.AutoField(db_column='IR_EDITLETTER_ANSWER_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_EDITLETTER_ANSWER',
            },
        ),
        migrations.CreateModel(
            name='IrGroupAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_GROUP_ACL',
            },
        ),
        migrations.CreateModel(
            name='IrRoleAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_ROLE_ACL',
            },
        ),
        migrations.CreateModel(
            name='IrServiceAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_SERVICE_ACL',
            },
        ),
        migrations.CreateModel(
            name='IrUserAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_USER_ACL',
            },
        ),
        migrations.CreateModel(
            name='Letter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(db_column='DATE')),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('content', models.TextField(db_column='CONTENT')),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
            ],
            options={
                'managed': True,
                'db_table': 'LETTER',
            },
        ),
        migrations.CreateModel(
            name='LetterImage',
            fields=[
                ('letter_image_id', models.AutoField(db_column='LETTER_IMAGE_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('filename', models.CharField(db_column='FILENAME', max_length=50)),
            ],
            options={
                'managed': True,
                'db_table': 'LETTER_IMAGE',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('location_id', models.AutoField(db_column='LOCATION_ID', primary_key=True, serialize=False)),
                ('communal_cantonal_number', models.IntegerField(blank=True, db_column='COMMUNAL_CANTONAL_NUMBER', null=True)),
                ('communal_federal_number', models.CharField(blank=True, db_column='COMMUNAL_FEDERAL_NUMBER', max_length=255, null=True)),
                ('district_number', models.IntegerField(blank=True, db_column='DISTRICT_NUMBER', null=True)),
                ('section_number', models.IntegerField(blank=True, db_column='SECTION_NUMBER', null=True)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=100, null=True)),
                ('commune_name', models.CharField(blank=True, db_column='COMMUNE_NAME', max_length=100, null=True)),
                ('district_name', models.CharField(blank=True, db_column='DISTRICT_NAME', max_length=100, null=True)),
                ('section_name', models.CharField(blank=True, db_column='SECTION_NAME', max_length=100, null=True)),
                ('zip', models.CharField(blank=True, db_column='ZIP', max_length=10, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'LOCATION',
            },
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('login_attempt_id', models.AutoField(db_column='LOGIN_ATTEMPT_ID', primary_key=True, serialize=False)),
                ('ip', models.CharField(db_column='IP', max_length=45)),
                ('attempt_date', models.DateTimeField(db_column='ATTEMPT_DATE')),
                ('username', models.CharField(blank=True, db_column='USERNAME', max_length=250, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'LOGIN_ATTEMPT',
            },
        ),
        migrations.CreateModel(
            name='Mapping',
            fields=[
                ('mapping_id', models.AutoField(db_column='MAPPING_ID', primary_key=True, serialize=False)),
                ('table_name', models.CharField(db_column='TABLE_NAME', max_length=30)),
                ('column_name', models.CharField(db_column='COLUMN_NAME', max_length=30)),
            ],
            options={
                'managed': True,
                'db_table': 'MAPPING',
            },
        ),
        migrations.CreateModel(
            name='Notice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, db_column='CONTENT', null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'NOTICE',
            },
        ),
        migrations.CreateModel(
            name='NoticeImage',
            fields=[
                ('notice_image_id', models.AutoField(db_column='NOTICE_IMAGE_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('filename', models.CharField(db_column='FILENAME', max_length=50)),
            ],
            options={
                'managed': True,
                'db_table': 'NOTICE_IMAGE',
            },
        ),
        migrations.CreateModel(
            name='NoticeLog',
            fields=[
                ('notice_log_id', models.AutoField(db_column='NOTICE_LOG_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('user_id', models.IntegerField(db_column='USER_ID')),
                ('action', models.CharField(db_column='ACTION', max_length=500)),
                ('data', models.TextField(blank=True, db_column='DATA', null=True)),
                ('id1', models.IntegerField(db_column='ID1')),
                ('field1', models.CharField(db_column='FIELD1', max_length=30)),
                ('id2', models.IntegerField(db_column='ID2')),
                ('field2', models.CharField(db_column='FIELD2', max_length=30)),
            ],
            options={
                'managed': True,
                'db_table': 'NOTICE_LOG',
            },
        ),
        migrations.CreateModel(
            name='NoticeType',
            fields=[
                ('notice_type_id', models.AutoField(db_column='NOTICE_TYPE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
            ],
            options={
                'managed': True,
                'db_table': 'NOTICE_TYPE',
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('page_id', models.AutoField(db_column='PAGE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=500)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
                ('javascript', models.CharField(blank=True, db_column='JAVASCRIPT', max_length=4000, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE',
            },
        ),
        migrations.CreateModel(
            name='PageAnswerActivation',
            fields=[
                ('page_answer_activation_id', models.AutoField(db_column='PAGE_ANSWER_ACTIVATION_ID', primary_key=True, serialize=False)),
                ('answer', models.CharField(db_column='ANSWER', max_length=4000)),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE_ANSWER_ACTIVATION',
            },
        ),
        migrations.CreateModel(
            name='PageForm',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE_FORM',
            },
        ),
        migrations.CreateModel(
            name='PageFormGroup',
            fields=[
                ('page_form_group_id', models.AutoField(db_column='PAGE_FORM_GROUP_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=50, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE_FORM_GROUP',
            },
        ),
        migrations.CreateModel(
            name='PageFormGroupAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE_FORM_GROUP_ACL',
            },
        ),
        migrations.CreateModel(
            name='PageFormMode',
            fields=[
                ('page_form_mode_id', models.AutoField(db_column='PAGE_FORM_MODE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE_FORM_MODE',
            },
        ),
        migrations.CreateModel(
            name='PageFormRoleAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE_FORM_ROLE_ACL',
            },
        ),
        migrations.CreateModel(
            name='PageFormServiceAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE_FORM_SERVICE_ACL',
            },
        ),
        migrations.CreateModel(
            name='PageFormUserAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'PAGE_FORM_USER_ACL',
            },
        ),
        migrations.CreateModel(
            name='PortalSession',
            fields=[
                ('portal_session_id', models.CharField(db_column='PORTAL_SESSION_ID', max_length=256, primary_key=True, serialize=False)),
                ('portal_identifier', models.CharField(db_column='PORTAL_IDENTIFIER', max_length=256)),
                ('last_active', models.DateTimeField(db_column='LAST_ACTIVE')),
            ],
            options={
                'managed': True,
                'db_table': 'PORTAL_SESSION',
            },
        ),
        migrations.CreateModel(
            name='ProposalActivation',
            fields=[
                ('proposal_activation_id', models.AutoField(db_column='PROPOSAL_ACTIVATION_ID', primary_key=True, serialize=False)),
                ('deadline_date', models.DateTimeField(db_column='DEADLINE_DATE')),
                ('reason', models.CharField(blank=True, db_column='REASON', max_length=50, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PROPOSAL_ACTIVATION',
            },
        ),
        migrations.CreateModel(
            name='PublicationEntry',
            fields=[
                ('publication_entry_id', models.AutoField(db_column='PUBLICATION_ENTRY_ID', primary_key=True, serialize=False)),
                ('note', models.FloatField(db_column='NOTE')),
                ('publication_date', models.DateTimeField(db_column='PUBLICATION_DATE')),
                ('is_published', models.PositiveSmallIntegerField(db_column='IS_PUBLISHED')),
                ('text', models.TextField(blank=True, db_column='TEXT', null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PUBLICATION_ENTRY',
            },
        ),
        migrations.CreateModel(
            name='PublicationSetting',
            fields=[
                ('publication_setting_id', models.AutoField(db_column='PUBLICATION_SETTING_ID', primary_key=True, serialize=False)),
                ('key', models.CharField(db_column='KEY', max_length=64)),
                ('value', models.CharField(blank=True, db_column='VALUE', max_length=4000, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'PUBLICATION_SETTING',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('question_id', models.AutoField(db_column='QUESTION_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=500)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
                ('javascript', models.CharField(blank=True, db_column='JAVASCRIPT', max_length=4000, null=True)),
                ('regex', models.CharField(blank=True, db_column='REGEX', max_length=1000, null=True)),
                ('default_answer', models.CharField(blank=True, db_column='DEFAULT_ANSWER', max_length=4000, null=True)),
                ('class_field', models.CharField(blank=True, db_column='CLASS', max_length=25, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'QUESTION',
            },
        ),
        migrations.CreateModel(
            name='QuestionChapter',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('required', models.PositiveSmallIntegerField(db_column='REQUIRED')),
                ('item', models.IntegerField(db_column='ITEM')),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'managed': True,
                'db_table': 'QUESTION_CHAPTER',
            },
        ),
        migrations.CreateModel(
            name='QuestionChapterGroupAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'QUESTION_CHAPTER_GROUP_ACL',
            },
        ),
        migrations.CreateModel(
            name='QuestionChapterRoleAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'QUESTION_CHAPTER_ROLE_ACL',
            },
        ),
        migrations.CreateModel(
            name='QuestionChapterServiceAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'QUESTION_CHAPTER_SERVICE_ACL',
            },
        ),
        migrations.CreateModel(
            name='QuestionChapterUserAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'QUESTION_CHAPTER_USER_ACL',
            },
        ),
        migrations.CreateModel(
            name='QuestionType',
            fields=[
                ('question_type_id', models.AutoField(db_column='QUESTION_TYPE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=20)),
                ('sort', models.IntegerField(blank=True, db_column='SORT', null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'QUESTION_TYPE',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('resource_id', models.AutoField(db_column='RESOURCE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
                ('template', models.CharField(blank=True, db_column='TEMPLATE', max_length=500, null=True)),
                ('class_field', models.CharField(blank=True, db_column='CLASS', max_length=25, null=True)),
                ('hidden', models.PositiveSmallIntegerField(db_column='HIDDEN')),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'managed': True,
                'db_table': 'RESOURCE',
            },
        ),
        migrations.CreateModel(
            name='RGroupAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'R_GROUP_ACL',
            },
        ),
        migrations.CreateModel(
            name='RListColumn',
            fields=[
                ('r_list_column_id', models.AutoField(db_column='R_LIST_COLUMN_ID', primary_key=True, serialize=False)),
                ('column_name', models.CharField(db_column='COLUMN_NAME', max_length=30)),
                ('alias', models.CharField(db_column='ALIAS', max_length=30)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'managed': True,
                'db_table': 'R_LIST_COLUMN',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('role_id', models.AutoField(db_column='ROLE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=100)),
            ],
            options={
                'managed': True,
                'db_table': 'ROLE',
            },
        ),
        migrations.CreateModel(
            name='RRoleAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'R_ROLE_ACL',
            },
        ),
        migrations.CreateModel(
            name='RSearchColumn',
            fields=[
                ('r_search_column_id', models.AutoField(db_column='R_SEARCH_COLUMN_ID', primary_key=True, serialize=False)),
                ('column_name', models.CharField(db_column='COLUMN_NAME', max_length=30)),
                ('alias', models.CharField(db_column='ALIAS', max_length=30)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'managed': True,
                'db_table': 'R_SEARCH_COLUMN',
            },
        ),
        migrations.CreateModel(
            name='RSearchFilter',
            fields=[
                ('r_search_filter_id', models.AutoField(db_column='R_SEARCH_FILTER_ID', primary_key=True, serialize=False)),
                ('field_name', models.CharField(db_column='FIELD_NAME', max_length=50)),
                ('label', models.CharField(db_column='LABEL', max_length=1000)),
                ('query', models.CharField(db_column='QUERY', max_length=4000)),
                ('wildcard', models.PositiveSmallIntegerField(db_column='WILDCARD')),
                ('class_field', models.CharField(blank=True, db_column='CLASS', max_length=25, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'R_SEARCH_FILTER',
            },
        ),
        migrations.CreateModel(
            name='RServiceAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'R_SERVICE_ACL',
            },
        ),
        migrations.CreateModel(
            name='RSimpleList',
            fields=[
                ('resource_id', models.AutoField(db_column='RESOURCE_ID', primary_key=True, serialize=False)),
                ('instance_states', models.CharField(db_column='INSTANCE_STATES', max_length=100)),
            ],
            options={
                'managed': True,
                'db_table': 'R_SIMPLE_LIST',
            },
        ),
        migrations.CreateModel(
            name='RUserAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'managed': True,
                'db_table': 'R_USER_ACL',
            },
        ),
        migrations.CreateModel(
            name='Sanction',
            fields=[
                ('sanction_id', models.AutoField(db_column='SANCTION_ID', primary_key=True, serialize=False)),
                ('text', models.CharField(db_column='TEXT', max_length=4000)),
                ('start_date', models.DateTimeField(db_column='START_DATE')),
                ('deadline_date', models.DateTimeField(blank=True, db_column='DEADLINE_DATE', null=True)),
                ('end_date', models.DateTimeField(blank=True, db_column='END_DATE', null=True)),
                ('notice', models.CharField(blank=True, db_column='NOTICE', max_length=500, null=True)),
                ('is_finished', models.PositiveSmallIntegerField(db_column='IS_FINISHED')),
            ],
            options={
                'managed': True,
                'db_table': 'SANCTION',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('service_id', models.AutoField(db_column='SERVICE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=100)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=255, null=True)),
                ('sort', models.IntegerField(db_column='SORT')),
                ('phone', models.CharField(blank=True, db_column='PHONE', max_length=100, null=True)),
                ('zip', models.CharField(blank=True, db_column='ZIP', max_length=10, null=True)),
                ('city', models.CharField(blank=True, db_column='CITY', max_length=100, null=True)),
                ('address', models.CharField(blank=True, db_column='ADDRESS', max_length=100, null=True)),
                ('email', models.CharField(blank=True, db_column='EMAIL', max_length=100, null=True)),
                ('website', models.CharField(blank=True, db_column='WEBSITE', max_length=1000, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'SERVICE',
            },
        ),
        migrations.CreateModel(
            name='ServiceAnswerActivation',
            fields=[
                ('service_answer_activation_id', models.AutoField(db_column='SERVICE_ANSWER_ACTIVATION_ID', primary_key=True, serialize=False)),
                ('answer', models.CharField(db_column='ANSWER', max_length=4000)),
                ('chapter', models.ForeignKey(db_column='CHAPTER_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Chapter')),
                ('form', models.ForeignKey(db_column='FORM_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='instance.Form')),
                ('question', models.ForeignKey(db_column='QUESTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Question')),
                ('service', models.ForeignKey(db_column='SERVICE_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Service')),
            ],
            options={
                'managed': True,
                'db_table': 'SERVICE_ANSWER_ACTIVATION',
            },
        ),
        migrations.CreateModel(
            name='ServiceGroup',
            fields=[
                ('service_group_id', models.AutoField(db_column='SERVICE_GROUP_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=100)),
            ],
            options={
                'managed': True,
                'db_table': 'SERVICE_GROUP',
            },
        ),
        migrations.CreateModel(
            name='WorkflowEntry',
            fields=[
                ('workflow_entry_id', models.AutoField(db_column='WORKFLOW_ENTRY_ID', primary_key=True, serialize=False)),
                ('workflow_date', models.DateTimeField(db_column='WORKFLOW_DATE')),
                ('group', models.FloatField(db_column='GROUP')),
                ('instance', models.ForeignKey(db_column='INSTANCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, to='instance.Instance')),
            ],
            options={
                'managed': True,
                'db_table': 'WORKFLOW_ENTRY',
            },
        ),
        migrations.CreateModel(
            name='WorkflowItem',
            fields=[
                ('workflow_item_id', models.AutoField(db_column='WORKFLOW_ITEM_ID', primary_key=True, serialize=False)),
                ('position', models.FloatField(db_column='POSITION')),
                ('name', models.CharField(db_column='NAME', max_length=255)),
                ('automatical', models.PositiveSmallIntegerField(db_column='AUTOMATICAL')),
                ('different_color', models.PositiveSmallIntegerField(db_column='DIFFERENT_COLOR')),
                ('is_workflow', models.PositiveSmallIntegerField(db_column='IS_WORKFLOW')),
                ('is_building_authority', models.PositiveSmallIntegerField(db_column='IS_BUILDING_AUTHORITY')),
            ],
            options={
                'managed': True,
                'db_table': 'WORKFLOW_ITEM',
            },
        ),
        migrations.CreateModel(
            name='WorkflowRole',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('role', models.ForeignKey(db_column='ROLE_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Role')),
                ('workflow_item', models.ForeignKey(db_column='WORKFLOW_ITEM_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.WorkflowItem')),
            ],
            options={
                'managed': True,
                'db_table': 'WORKFLOW_ROLE',
            },
        ),
        migrations.CreateModel(
            name='WorkflowSection',
            fields=[
                ('workflow_section_id', models.AutoField(db_column='WORKFLOW_SECTION_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=60)),
                ('sort', models.FloatField(blank=True, db_column='SORT', null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'WORKFLOW_SECTION',
            },
        ),
        migrations.CreateModel(
            name='ACheckquery',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('query', models.CharField(db_column='QUERY', max_length=4000)),
            ],
            options={
                'managed': True,
                'db_table': 'A_CHECKQUERY',
            },
        ),
        migrations.CreateModel(
            name='ACirculationEmail',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('sender_name', models.CharField(db_column='SENDER_NAME', max_length=50)),
                ('sender_email', models.CharField(db_column='SENDER_EMAIL', max_length=50)),
                ('title', models.CharField(db_column='TITLE', max_length=200)),
                ('text', models.CharField(db_column='TEXT', max_length=2000)),
            ],
            options={
                'managed': True,
                'db_table': 'A_CIRCULATION_EMAIL',
            },
        ),
        migrations.CreateModel(
            name='ACirculationtransition',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
            ],
            options={
                'managed': True,
                'db_table': 'A_CIRCULATIONTRANSITION',
            },
        ),
        migrations.CreateModel(
            name='ACopyanswer',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
            ],
            options={
                'managed': True,
                'db_table': 'A_COPYANSWER',
            },
        ),
        migrations.CreateModel(
            name='ACopydata',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
            ],
            options={
                'managed': True,
                'db_table': 'A_COPYDATA',
            },
        ),
        migrations.CreateModel(
            name='ADeleteCirculation',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('delete_level', models.IntegerField(db_column='DELETE_LEVEL')),
            ],
            options={
                'managed': True,
                'db_table': 'A_DELETE_CIRCULATION',
            },
        ),
        migrations.CreateModel(
            name='AEmail',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('sender_name', models.CharField(db_column='SENDER_NAME', max_length=50)),
                ('sender_email', models.CharField(db_column='SENDER_EMAIL', max_length=50)),
                ('query', models.CharField(db_column='QUERY', max_length=4000)),
                ('title', models.CharField(db_column='TITLE', max_length=200)),
                ('text', models.CharField(db_column='TEXT', max_length=2000)),
            ],
            options={
                'managed': True,
                'db_table': 'A_EMAIL',
            },
        ),
        migrations.CreateModel(
            name='AFormtransition',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
            ],
            options={
                'managed': True,
                'db_table': 'A_FORMTRANSITION',
            },
        ),
        migrations.CreateModel(
            name='ALocation',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
            ],
            options={
                'managed': True,
                'db_table': 'A_LOCATION',
            },
        ),
        migrations.CreateModel(
            name='ANotice',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('query', models.CharField(db_column='QUERY', max_length=4000)),
            ],
            options={
                'managed': True,
                'db_table': 'A_NOTICE',
            },
        ),
        migrations.CreateModel(
            name='APageredirect',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('air_action_name', models.CharField(blank=True, db_column='AIR_ACTION_NAME', max_length=25, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'A_PAGEREDIRECT',
            },
        ),
        migrations.CreateModel(
            name='APhp',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('php_class', models.CharField(db_column='PHP_CLASS', max_length=500)),
            ],
            options={
                'managed': True,
                'db_table': 'A_PHP',
            },
        ),
        migrations.CreateModel(
            name='AProposal',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('deadline_days', models.IntegerField(db_column='DEADLINE_DAYS')),
                ('reason', models.CharField(blank=True, db_column='REASON', max_length=50, null=True)),
                ('is_working_days', models.PositiveSmallIntegerField(db_column='IS_WORKING_DAYS')),
            ],
            options={
                'managed': True,
                'db_table': 'A_PROPOSAL',
            },
        ),
        migrations.CreateModel(
            name='ASavepdf',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('show_all_page_form_mode', models.PositiveSmallIntegerField(db_column='SHOW_ALL_PAGE_FORM_MODE')),
                ('template', models.CharField(db_column='TEMPLATE', max_length=500)),
                ('pdf_class', models.CharField(db_column='PDF_CLASS', max_length=500)),
            ],
            options={
                'managed': True,
                'db_table': 'A_SAVEPDF',
            },
        ),
        migrations.CreateModel(
            name='AValidate',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
            ],
            options={
                'managed': True,
                'db_table': 'A_VALIDATE',
            },
        ),
        migrations.CreateModel(
            name='IrAllformpages',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
                ('show_all_page_form_mode', models.PositiveSmallIntegerField(db_column='SHOW_ALL_PAGE_FORM_MODE')),
            ],
            options={
                'managed': True,
                'db_table': 'IR_ALLFORMPAGES',
            },
        ),
        migrations.CreateModel(
            name='IrCirculation',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('show_notice', models.PositiveSmallIntegerField(db_column='SHOW_NOTICE')),
                ('show_history', models.PositiveSmallIntegerField(db_column='SHOW_HISTORY')),
                ('show_all_children', models.PositiveSmallIntegerField(db_column='SHOW_ALL_CHILDREN')),
                ('read_notice_template', models.CharField(blank=True, db_column='READ_NOTICE_TEMPLATE', max_length=500, null=True)),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
                ('service_to_be_interpreted', models.CharField(blank=True, db_column='SERVICE_TO_BE_INTERPRETED', max_length=50, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_CIRCULATION',
            },
        ),
        migrations.CreateModel(
            name='IrEditcirculation',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('show_notice', models.PositiveSmallIntegerField(db_column='SHOW_NOTICE')),
                ('add_template', models.CharField(blank=True, db_column='ADD_TEMPLATE', max_length=500, null=True)),
                ('add_activation_template', models.CharField(blank=True, db_column='ADD_ACTIVATION_TEMPLATE', max_length=500, null=True)),
                ('read_notice_template', models.CharField(blank=True, db_column='READ_NOTICE_TEMPLATE', max_length=500, null=True)),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
                ('default_circulation_name', models.CharField(blank=True, db_column='DEFAULT_CIRCULATION_NAME', max_length=500, null=True)),
                ('single_circulation', models.PositiveSmallIntegerField(db_column='SINGLE_CIRCULATION')),
                ('inherit_notices', models.PositiveSmallIntegerField(db_column='INHERIT_NOTICES')),
                ('display_first_circulation', models.PositiveSmallIntegerField(db_column='DISPLAY_FIRST_CIRCULATION')),
            ],
            options={
                'managed': True,
                'db_table': 'IR_EDITCIRCULATION',
            },
        ),
        migrations.CreateModel(
            name='IrEditformpage',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_EDITFORMPAGE',
            },
        ),
        migrations.CreateModel(
            name='IrEditformpages',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_EDITFORMPAGES',
            },
        ),
        migrations.CreateModel(
            name='IrEditletter',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_EDITLETTER',
            },
        ),
        migrations.CreateModel(
            name='IrEditnotice',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('editable_after_deadline', models.PositiveSmallIntegerField(db_column='EDITABLE_AFTER_DEADLINE')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
                ('edit_notice_template', models.CharField(blank=True, db_column='EDIT_NOTICE_TEMPLATE', max_length=500, null=True)),
                ('hide_answered_notices', models.PositiveSmallIntegerField(db_column='HIDE_ANSWERED_NOTICES')),
                ('is_always_editable', models.PositiveSmallIntegerField(db_column='IS_ALWAYS_EDITABLE')),
            ],
            options={
                'managed': True,
                'db_table': 'IR_EDITNOTICE',
            },
        ),
        migrations.CreateModel(
            name='IrFormerror',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
            ],
            options={
                'managed': True,
                'db_table': 'IR_FORMERROR',
            },
        ),
        migrations.CreateModel(
            name='IrFormpage',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_FORMPAGE',
            },
        ),
        migrations.CreateModel(
            name='IrFormpages',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_FORMPAGES',
            },
        ),
        migrations.CreateModel(
            name='IrFormwizard',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('show_captcha', models.PositiveSmallIntegerField(db_column='SHOW_CAPTCHA')),
                ('summary', models.CharField(blank=True, db_column='SUMMARY', max_length=4000, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_FORMWIZARD',
            },
        ),
        migrations.CreateModel(
            name='IrLetter',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('ir_editletter_id', models.IntegerField(blank=True, db_column='IR_EDITLETTER_ID', null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_LETTER',
            },
        ),
        migrations.CreateModel(
            name='IrNewform',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
            ],
            options={
                'managed': True,
                'db_table': 'IR_NEWFORM',
            },
        ),
        migrations.CreateModel(
            name='IrPage',
            fields=[
                ('instance_resource', models.OneToOneField(db_column='INSTANCE_RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.InstanceResource')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'IR_PAGE',
            },
        ),
        migrations.CreateModel(
            name='RFormlist',
            fields=[
                ('resource', models.OneToOneField(db_column='RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Resource')),
            ],
            options={
                'managed': True,
                'db_table': 'R_FORMLIST',
            },
        ),
        migrations.CreateModel(
            name='RList',
            fields=[
                ('resource', models.OneToOneField(db_column='RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Resource')),
                ('query', models.CharField(db_column='QUERY', max_length=4000)),
            ],
            options={
                'managed': True,
                'db_table': 'R_LIST',
            },
        ),
        migrations.CreateModel(
            name='RPage',
            fields=[
                ('resource', models.OneToOneField(db_column='RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Resource')),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
            ],
            options={
                'managed': True,
                'db_table': 'R_PAGE',
            },
        ),
        migrations.CreateModel(
            name='RSearch',
            fields=[
                ('resource', models.OneToOneField(db_column='RESOURCE_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Resource')),
                ('result_template', models.CharField(blank=True, db_column='RESULT_TEMPLATE', max_length=500, null=True)),
                ('query', models.CharField(db_column='QUERY', max_length=4000)),
                ('pdf_class', models.CharField(blank=True, db_column='PDF_CLASS', max_length=500, null=True)),
                ('preserve_result', models.PositiveSmallIntegerField(db_column='PRESERVE_RESULT')),
            ],
            options={
                'managed': True,
                'db_table': 'R_SEARCH',
            },
        ),
        migrations.CreateModel(
            name='WorkflowAction',
            fields=[
                ('action', models.OneToOneField(db_column='ACTION_ID', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, related_name='+', serialize=False, to='core.Action')),
                ('multi_value', models.PositiveSmallIntegerField(db_column='MULTI_VALUE')),
            ],
            options={
                'managed': True,
                'db_table': 'WORKFLOW_ACTION',
            },
        ),
        migrations.AddField(
            model_name='workflowitem',
            name='workflow_section',
            field=models.ForeignKey(blank=True, db_column='WORKFLOW_SECTION_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.WorkflowSection'),
        ),
        migrations.AddField(
            model_name='workflowentry',
            name='workflow_item',
            field=models.ForeignKey(db_column='WORKFLOW_ITEM_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.WorkflowItem'),
        ),
        migrations.AddField(
            model_name='service',
            name='service_group',
            field=models.ForeignKey(db_column='SERVICE_GROUP_ID', on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.ServiceGroup'),
        ),
        migrations.AddField(
            model_name='service',
            name='service_parent',
            field=models.ForeignKey(blank=True, db_column='SERVICE_PARENT_ID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='core.Service'),
        ),
    ]
