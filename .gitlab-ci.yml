---

# TODO: Use `extends` so logic does not need to be duplicated


image: tmaier/docker-compose:latest

variables:
    LANG: C.UTF-8
    LC_ALL: C.UTF-8
    COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.ci.yml
    APPLICATION: demo

before_script:
    - mkdir /root/.docker
    - echo "$RUNNER_DOCKER_CAPEM" > /root/.docker/ca.pem
    - echo "$RUNNER_DOCKER_CERTPEM" > /root/.docker/cert.pem
    - echo "$RUNNER_DOCKER_KEYPEM" > /root/.docker/key.pem

stages:
    - test
    - build
    - deploy

test:
    stage: test
    services:
        - docker:dind
    script:
        # pull docker images for cache
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        # need to run pulling of images in subshell as otherwise CI_COMMIT_REF_SLUG
        # is set for following commands as well
        - sh -c "export CI_COMMIT_REF_SLUG=master; eval $COMPOSE pull --ignore-pull-failures --quiet ember django db"
        # start only services which are needed for testing
        - eval $COMPOSE up -d --build db clamav unoconv
        # build images needed for testing
        - eval $COMPOSE build --pull ember django
        # run django tests
        - eval $COMPOSE run --rm --no-deps django make install-dev test
        # run ember tests
        - eval $COMPOSE run --rm --no-deps ember yarn test


# TODO: This needs to reconfigured so it also works with kt_uri and kt_schwyz (See package.json).
lint:
  stage: test
  image:
    name: node:9
  script:
    # TODO: Discuss with christianz why this is needed.
    #- if git grep -e ä  -e ö  -e ü   -- './*' ':!.gitlab-ci.yml'; then exit 1; else echo "No composite umlaute found"; fi
    - cd php/public
    - npm install
    - npm run lint
  # TODO: Remove this once the job is fixed.
  allow_failure: true

sensiolabs-security-checker:
  stage: test
  image:
    name: jsixc/sensiolabs-security-checker:7.1
  script: /usr/local/bin/security-checker security:check ./php/composer.lock
  # TODO: Fix violations and remove `allow_failure`.
  allow_failure: true

build:
    stage: build
    services:
        - docker:dind
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull --ignore-pull-failures --quiet ember django php db
        - eval $COMPOSE build --pull
        - eval $COMPOSE push
    only:
        - master


build-kt_schwyz-stage:
    stage: build
    services:
        - docker:dind
    variables:
        KEYCLOAK_URL: https://camac-schwyz.sycloud.ch/auth/
        APPLICATION: kt_schwyz
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull --ignore-pull-failures --quiet ember django php db
        - eval $COMPOSE build --pull
        - eval $COMPOSE push
    only:
        - stage


build-kt_uri-stage:
    stage: build
    services:
        - docker:dind
    variables:
        APPLICATION: kt_uri
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull --ignore-pull-failures --quiet ember django php db
        - eval $COMPOSE build --pull
        - eval $COMPOSE push
    only:
        - stage


build-kt_uri-production:
    stage: build
    services:
        - docker:dind
    variables:
        APPLICATION: kt_uri
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull --ignore-pull-failures --quiet ember django php db
        - eval $COMPOSE build --pull
        - eval $COMPOSE push
    only:
        - production


deploy-kt_schwyz-stage:
    environment:
        name: stage-kt_schwyz
        url: https://camac-schwyz.sycloud.ch/
    variables:
        APPLICATION: kt_schwyz
        # because of https://github.com/docker/compose/issues/2668 tls certs
        # need to be assigned as parameters - once fixed such params can be removed.
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml --tlsverify --tlscert /root/.docker/cert.pem --tlskey /root/.docker/key.pem --tlscacert /root/.docker/ca.pem
        DOCKER_HOST: vm-camac-webapp-stage-02.cust.adfinis-sygroup.ch:2376
        DOCKER_TLS_VERIFY: 1
    stage: deploy
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull
        - eval $COMPOSE up -d
    only:
        - stage
    when: manual


deploy-kt_uri-stage:
    environment:
        name: stage-kt_uri
        url: https://camac-uri.sycloud.ch/
    variables:
        APPLICATION: kt_uri
        # because of https://github.com/docker/compose/issues/2668 tls certs
        # need to be assigned as parameters - once fixed such params can be removed.
        COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml --tlsverify --tlscert /root/.docker/cert.pem --tlskey /root/.docker/key.pem --tlscacert /root/.docker/ca.pem
        DOCKER_HOST: vm-camac-webapp-stage-01.cust.adfinis-sygroup.ch:2376
        DOCKER_TLS_VERIFY: 1
    stage: deploy
    script:
        - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
        - eval $COMPOSE pull
        - eval $COMPOSE up -d
        - eval $COMPOSE stop keycloak
    only:
        - stage
    when: manual


pyup:
    stage: test
    image: python:3.6
    variables:
        PIP_CACHE_DIR: "pip-cache"
    cache:
        paths:
            - "pip-cache"
    script:
        # Pin to python-gitlab 1.2.0 as 1.3.0 is failing
        # has something to do with url encoding but not clear whether issue is
        # our configuration (Apache...) or in gitlab itself
        # TODO test again when we use GitLab with nginx
        - pip install -U python-gitlab==1.2.0 pyupio
        - pyup --provider gitlab --repo=819 --user-token=$GITTY_USER_TOKEN@https://git.adfinis-sygroup.ch/
    only:
        - disabled


build-kt_bern-production:
  stage: build
  services:
    - docker:dind
  variables:
    COMPOSE: docker-compose -f docker-compose.yml -f docker-compose.production.yml
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN acr.run
    - eval $COMPOSE pull --ignore-pull-failures --quiet ember django php db
    - eval $COMPOSE build --pull
    # Create a minimal tarball which is deployable by
    # https://github.com/camac-suisse/ansible-role-camac
    - mkdir tarball && cd tarball
    # Copy the content of the PHP container
    - docker copy camac-ng_php_1:/var/www/camac/000-default.conf .
    - docker copy camac-ng_php_1:/var/www/camac/kt_bern configuration/
    - docker copy camac-ng_php_1:/var/lib/camac/application camac/
    # Copy the content of the Django container
    # TODO: This needs to be adjusted in the ansible playbook
    - docker copy camac-ng_django_1:/app django/
    # Create tarball of extracted files and directores
    - tar --exclude-vcs -zcvf "/tmp/camac-be-${CI_COMMIT_REF_SLUG}.tar.gz"tar --exclude-vcs -zcvf "/tmp/camac-be-${CI_COMMIT_REF_SLUG}.tar.gz"
  artifacts:
    paths:
      - "/tmp/camac-be-${CI_COMMIT_REF_SLUG}.tar.gz"
    expire_in: 1 month
  # TODO: This should be commented in before merging.
  #only:
  #  - production


deploy-kt_bern-production:
  stage: deploy
  image:
    name: instrumentisto/rsync-ssh
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${PUBLISH_SSH_PRIVATE_KEY}" | tr -d '\r' > ~/.ssh/id_rsa
    - echo "${PUBLISH_SSH_PUBLIC_KEY}" > ~/.ssh/id_rsa.pub
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host *\n\tUser ${PUBLISH_SSH_USERNAME}\n\tIdentityFile ~/.ssh/id_rsa" > ~/.ssh/config
    - echo "${PUBLISH_SSH_KNOWN_HOSTS}" > ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - "rsync ./camac-be-${CI_COMMIT_REF_SLUG}.tar.gz ${PUBLISH_RSYNC_TARGET}"
    - "sha256sum ./camac-be-${CI_COMMIT_REF_SLUG}.tar.gz"
  # TODO: This should be commented in before merging.
  #only:
  #  - production
  when: manual
