# -*- coding: utf-8 -*-
# Generated by Django 1.11.8 on 2017-12-20 12:07
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ACopyanswerMapping',
            fields=[
                ('a_copyanswer_mapping_id', models.AutoField(db_column='A_COPYANSWER_MAPPING_ID', primary_key=True, serialize=False)),
                ('get_name', models.PositiveSmallIntegerField(db_column='GET_NAME')),
            ],
            options={
                'db_table': 'A_COPYANSWER_MAPPING',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ACopydataMapping',
            fields=[
                ('a_copydata_mapping_id', models.AutoField(db_column='A_COPYDATA_MAPPING_ID', primary_key=True, serialize=False)),
                ('table_name', models.CharField(db_column='TABLE_NAME', max_length=30)),
                ('column_name', models.CharField(db_column='COLUMN_NAME', max_length=30)),
                ('get_name', models.PositiveSmallIntegerField(db_column='GET_NAME')),
            ],
            options={
                'db_table': 'A_COPYDATA_MAPPING',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('action_id', models.AutoField(db_column='ACTION_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
                ('success_message', models.CharField(blank=True, db_column='SUCCESS_MESSAGE', max_length=1000, null=True)),
                ('error_message', models.CharField(blank=True, db_column='ERROR_MESSAGE', max_length=1000, null=True)),
                ('execute_always', models.PositiveSmallIntegerField(db_column='EXECUTE_ALWAYS')),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'db_table': 'ACTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Activation',
            fields=[
                ('activation_id', models.AutoField(db_column='ACTIVATION_ID', primary_key=True, serialize=False)),
                ('start_date', models.DateTimeField(db_column='START_DATE')),
                ('deadline_date', models.DateTimeField(db_column='DEADLINE_DATE')),
                ('suspension_date', models.DateTimeField(blank=True, db_column='SUSPENSION_DATE', null=True)),
                ('end_date', models.DateTimeField(blank=True, db_column='END_DATE', null=True)),
                ('version', models.IntegerField(db_column='VERSION')),
                ('reason', models.CharField(blank=True, db_column='REASON', max_length=50, null=True)),
                ('email_sent', models.PositiveSmallIntegerField(db_column='EMAIL_SENT', default=1)),
            ],
            options={
                'db_table': 'ACTIVATION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActivationAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item', models.IntegerField(db_column='ITEM')),
                ('answer', models.CharField(db_column='ANSWER', max_length=4000)),
            ],
            options={
                'db_table': 'ACTIVATION_ANSWER',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActivationAnswerLog',
            fields=[
                ('activation_answer_log_id', models.AutoField(db_column='ACTIVATION_ANSWER_LOG_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('user_id', models.IntegerField(db_column='USER_ID')),
                ('action', models.CharField(db_column='ACTION', max_length=500)),
                ('data', models.TextField(db_column='DATA')),
                ('id1', models.IntegerField(db_column='ID1')),
                ('field1', models.CharField(db_column='FIELD1', max_length=30)),
                ('id2', models.IntegerField(db_column='ID2')),
                ('field2', models.CharField(db_column='FIELD2', max_length=30)),
                ('id3', models.IntegerField(db_column='ID3')),
                ('field3', models.CharField(db_column='FIELD3', max_length=30)),
                ('id4', models.IntegerField(db_column='ID4')),
                ('field4', models.CharField(db_column='FIELD4', max_length=30)),
            ],
            options={
                'db_table': 'ACTIVATION_ANSWER_LOG',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActivationLog',
            fields=[
                ('activation_log_id', models.AutoField(db_column='ACTIVATION_LOG_ID', primary_key=True, serialize=False)),
                ('id', models.IntegerField(db_column='ID')),
                ('user_id', models.IntegerField(db_column='USER_ID')),
                ('action', models.CharField(db_column='ACTION', max_length=500)),
                ('data', models.TextField(blank=True, db_column='DATA', null=True)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
            ],
            options={
                'db_table': 'ACTIVATION_LOG',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AirAction',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('action_name', models.CharField(db_column='ACTION_NAME', max_length=50)),
                ('hidden', models.PositiveSmallIntegerField(db_column='HIDDEN')),
            ],
            options={
                'db_table': 'AIR_ACTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ALocationQc',
            fields=[
                ('a_location_qc_id', models.AutoField(db_column='A_LOCATION_QC_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'A_LOCATION_QC',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('item', models.IntegerField(db_column='ITEM')),
                ('answer', models.CharField(db_column='ANSWER', max_length=4000)),
            ],
            options={
                'db_table': 'ANSWER',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnswerList',
            fields=[
                ('answer_list_id', models.AutoField(db_column='ANSWER_LIST_ID', primary_key=True, serialize=False)),
                ('value', models.CharField(db_column='VALUE', max_length=20)),
                ('name', models.CharField(db_column='NAME', max_length=300)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'db_table': 'ANSWER_LIST',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnswerLog',
            fields=[
                ('answer_log_id', models.AutoField(db_column='ANSWER_LOG_ID', primary_key=True, serialize=False)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
                ('user_id', models.IntegerField(db_column='USER_ID')),
                ('action', models.CharField(db_column='ACTION', max_length=500)),
                ('data', models.TextField(blank=True, db_column='DATA', null=True)),
                ('id1', models.IntegerField(db_column='ID1')),
                ('field1', models.CharField(db_column='FIELD1', max_length=30)),
                ('id2', models.IntegerField(db_column='ID2')),
                ('field2', models.CharField(db_column='FIELD2', max_length=30)),
                ('id3', models.IntegerField(db_column='ID3')),
                ('field3', models.CharField(db_column='FIELD3', max_length=30)),
                ('id4', models.IntegerField(db_column='ID4')),
                ('field4', models.CharField(db_column='FIELD4', max_length=30)),
            ],
            options={
                'db_table': 'ANSWER_LOG',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AnswerQuery',
            fields=[
                ('answer_query_id', models.AutoField(db_column='ANSWER_QUERY_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('query', models.CharField(db_column='QUERY', max_length=4000)),
            ],
            options={
                'db_table': 'ANSWER_QUERY',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AProposalHoliday',
            fields=[
                ('a_proposal_holiday_id', models.AutoField(db_column='A_PROPOSAL_HOLIDAY_ID', primary_key=True, serialize=False)),
                ('holiday_date', models.DateTimeField(db_column='HOLIDAY_DATE')),
            ],
            options={
                'db_table': 'A_PROPOSAL_HOLIDAY',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ArAction',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('action_name', models.CharField(db_column='ACTION_NAME', max_length=50)),
                ('hidden', models.PositiveSmallIntegerField(db_column='HIDDEN')),
            ],
            options={
                'db_table': 'AR_ACTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('attachment_id', models.AutoField(db_column='ATTACHMENT_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=255)),
                ('path', models.CharField(db_column='PATH', max_length=1024)),
                ('size', models.FloatField(db_column='SIZE')),
                ('date', models.DateTimeField(db_column='DATE')),
                ('identifier', models.CharField(db_column='IDENTIFIER', max_length=255)),
                ('mime_type', models.CharField(db_column='MIME_TYPE', max_length=255)),
                ('is_parcel_picture', models.FloatField(blank=True, db_column='IS_PARCEL_PICTURE', default=0, null=True)),
                ('digital_signature', models.FloatField(db_column='DIGITAL_SIGNATURE', default=0)),
                ('is_confidential', models.PositiveSmallIntegerField(db_column='IS_CONFIDENTIAL', default=0)),
            ],
            options={
                'db_table': 'ATTACHMENT',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttachmentExtension',
            fields=[
                ('attachment_extension_id', models.AutoField(db_column='ATTACHMENT_EXTENSION_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=10)),
            ],
            options={
                'db_table': 'ATTACHMENT_EXTENSION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttachmentExtensionRole',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('mode', models.CharField(blank=True, db_column='MODE', max_length=10, null=True)),
            ],
            options={
                'db_table': 'ATTACHMENT_EXTENSION_ROLE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttachmentExtensionService',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('mode', models.CharField(blank=True, db_column='MODE', max_length=10, null=True)),
            ],
            options={
                'db_table': 'ATTACHMENT_EXTENSION_SERVICE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttachmentSection',
            fields=[
                ('attachment_section_id', models.AutoField(db_column='ATTACHMENT_SECTION_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=100)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'db_table': 'ATTACHMENT_SECTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttachmentSectionRole',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('role_id', models.FloatField(db_column='ROLE_ID')),
                ('mode', models.CharField(blank=True, db_column='MODE', max_length=10, null=True)),
            ],
            options={
                'db_table': 'ATTACHMENT_SECTION_ROLE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AttachmentSectionService',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('mode', models.CharField(db_column='MODE', max_length=20)),
            ],
            options={
                'db_table': 'ATTACHMENT_SECTION_SERVICE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Authority',
            fields=[
                ('authority_id', models.AutoField(db_column='AUTHORITY_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, db_column='NAME', max_length=128, null=True)),
            ],
            options={
                'db_table': 'AUTHORITY',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthorityAuthorityType',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('authority_id', models.FloatField(db_column='AUTHORITY_ID')),
                ('authority_type_id', models.FloatField(db_column='AUTHORITY_TYPE_ID')),
            ],
            options={
                'db_table': 'AUTHORITY_AUTHORITY_TYPE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthorityLocation',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'AUTHORITY_LOCATION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AuthorityType',
            fields=[
                ('authority_type_id', models.AutoField(db_column='AUTHORITY_TYPE_ID', primary_key=True, serialize=False)),
                ('tag', models.CharField(db_column='TAG', max_length=8)),
                ('name', models.CharField(db_column='NAME', max_length=128)),
            ],
            options={
                'db_table': 'AUTHORITY_TYPE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AvailableAction',
            fields=[
                ('available_action_id', models.CharField(db_column='AVAILABLE_ACTION_ID', max_length=25, primary_key=True, serialize=False)),
                ('module_name', models.CharField(db_column='MODULE_NAME', max_length=50)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
            ],
            options={
                'db_table': 'AVAILABLE_ACTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AvailableInstanceResource',
            fields=[
                ('available_instance_resource_id', models.CharField(db_column='AVAILABLE_INSTANCE_RESOURCE_ID', max_length=25, primary_key=True, serialize=False)),
                ('module_name', models.CharField(db_column='MODULE_NAME', max_length=50)),
                ('controller_name', models.CharField(db_column='CONTROLLER_NAME', max_length=50)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
            ],
            options={
                'db_table': 'AVAILABLE_INSTANCE_RESOURCE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AvailableResource',
            fields=[
                ('available_resource_id', models.CharField(db_column='AVAILABLE_RESOURCE_ID', max_length=25, primary_key=True, serialize=False)),
                ('module_name', models.CharField(db_column='MODULE_NAME', max_length=50)),
                ('controller_name', models.CharField(db_column='CONTROLLER_NAME', max_length=50)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
            ],
            options={
                'db_table': 'AVAILABLE_RESOURCE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BabUsage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('usage_type', models.IntegerField(db_column='USAGE_TYPE')),
                ('usage', models.FloatField(db_column='USAGE')),
            ],
            options={
                'db_table': 'BAB_USAGE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BGroupAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'B_GROUP_ACL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BillingAccount',
            fields=[
                ('billing_account_id', models.AutoField(db_column='BILLING_ACCOUNT_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=500)),
                ('account_number', models.CharField(blank=True, db_column='ACCOUNT_NUMBER', max_length=50, null=True)),
                ('department', models.CharField(blank=True, db_column='DEPARTMENT', max_length=255, null=True)),
                ('predefined', models.FloatField(blank=True, db_column='PREDEFINED', null=True)),
            ],
            options={
                'db_table': 'BILLING_ACCOUNT',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BillingAccountState',
            fields=[
                ('billing_account_state_id', models.AutoField(db_column='BILLING_ACCOUNT_STATE_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'BILLING_ACCOUNT_STATE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BillingConfig',
            fields=[
                ('billing_config_id', models.AutoField(db_column='BILLING_CONFIG_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=100)),
                ('value', models.CharField(db_column='VALUE', max_length=300)),
            ],
            options={
                'db_table': 'BILLING_CONFIG',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BillingEntry',
            fields=[
                ('billing_entry_id', models.AutoField(db_column='BILLING_ENTRY_ID', primary_key=True, serialize=False)),
                ('amount', models.FloatField(db_column='AMOUNT')),
                ('user_id', models.FloatField(blank=True, db_column='USER_ID', null=True)),
                ('created', models.DateTimeField(blank=True, db_column='CREATED', null=True)),
                ('amount_type', models.PositiveSmallIntegerField(db_column='AMOUNT_TYPE')),
                ('type', models.PositiveSmallIntegerField(db_column='TYPE')),
                ('reason', models.CharField(blank=True, db_column='REASON', max_length=300, null=True)),
                ('invoiced', models.PositiveSmallIntegerField(db_column='INVOICED')),
            ],
            options={
                'db_table': 'BILLING_ENTRY',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BRoleAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'B_ROLE_ACL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BServiceAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'B_SERVICE_ACL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BuildingAuthorityButton',
            fields=[
                ('building_authority_button_id', models.AutoField(db_column='BUILDING_AUTHORITY_BUTTON_ID', primary_key=True, serialize=False)),
                ('label', models.CharField(db_column='LABEL', max_length=512)),
            ],
            options={
                'db_table': 'BUILDING_AUTHORITY_BUTTON',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BuildingAuthorityButtonstate',
            fields=[
                ('ba_button_state_id', models.AutoField(db_column='BA_BUTTON_STATE_ID', primary_key=True, serialize=False)),
                ('is_clicked', models.PositiveSmallIntegerField(db_column='IS_CLICKED')),
                ('is_disabled', models.PositiveSmallIntegerField(db_column='IS_DISABLED')),
            ],
            options={
                'db_table': 'BUILDING_AUTHORITY_BUTTONSTATE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BuildingAuthorityComment',
            fields=[
                ('building_authority_comment_id', models.AutoField(db_column='BUILDING_AUTHORITY_COMMENT_ID', primary_key=True, serialize=False)),
                ('text', models.CharField(blank=True, db_column='TEXT', max_length=4000, null=True)),
                ('group', models.FloatField(db_column='GROUP')),
            ],
            options={
                'db_table': 'BUILDING_AUTHORITY_COMMENT',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BuildingAuthorityDoc',
            fields=[
                ('building_authority_doc_id', models.AutoField(db_column='BUILDING_AUTHORITY_DOC_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'BUILDING_AUTHORITY_DOC',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BuildingAuthorityEmail',
            fields=[
                ('building_authority_email_id', models.AutoField(db_column='BUILDING_AUTHORITY_EMAIL_ID', primary_key=True, serialize=False)),
                ('email_text', models.CharField(blank=True, db_column='EMAIL_TEXT', max_length=4000, null=True)),
                ('receiver_query', models.CharField(blank=True, db_column='RECEIVER_QUERY', max_length=4000, null=True)),
                ('email_subject', models.CharField(blank=True, db_column='EMAIL_SUBJECT', max_length=400, null=True)),
                ('from_email', models.CharField(blank=True, db_column='FROM_EMAIL', max_length=400, null=True)),
                ('from_name', models.CharField(blank=True, db_column='FROM_NAME', max_length=400, null=True)),
            ],
            options={
                'db_table': 'BUILDING_AUTHORITY_EMAIL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BuildingAuthorityItemDis',
            fields=[
                ('ba_item_dis_id', models.AutoField(db_column='BA_ITEM_DIS_ID', primary_key=True, serialize=False)),
                ('group', models.FloatField(db_column='GROUP')),
            ],
            options={
                'db_table': 'BUILDING_AUTHORITY_ITEM_DIS',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BuildingAuthoritySection',
            fields=[
                ('building_authority_section_id', models.AutoField(db_column='BUILDING_AUTHORITY_SECTION_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=128)),
            ],
            options={
                'db_table': 'BUILDING_AUTHORITY_SECTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BuildingAuthoritySectionDis',
            fields=[
                ('ba_section_dis_id', models.AutoField(db_column='BA_SECTION_DIS_ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'BUILDING_AUTHORITY_SECTION_DIS',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BUserAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'B_USER_ACL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Button',
            fields=[
                ('button_id', models.AutoField(db_column='BUTTON_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
                ('class_field', models.CharField(blank=True, db_column='CLASS', max_length=25, null=True)),
                ('hidden', models.PositiveSmallIntegerField(db_column='HIDDEN')),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'db_table': 'BUTTON',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('chapter_id', models.AutoField(db_column='CHAPTER_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=500)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
                ('javascript', models.CharField(blank=True, db_column='JAVASCRIPT', max_length=4000, null=True)),
            ],
            options={
                'db_table': 'CHAPTER',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChapterPage',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'db_table': 'CHAPTER_PAGE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChapterPageGroupAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'CHAPTER_PAGE_GROUP_ACL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChapterPageRoleAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'CHAPTER_PAGE_ROLE_ACL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChapterPageServiceAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'CHAPTER_PAGE_SERVICE_ACL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChapterPageUserAcl',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'CHAPTER_PAGE_USER_ACL',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Circulation',
            fields=[
                ('circulation_id', models.AutoField(db_column='CIRCULATION_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
            ],
            options={
                'db_table': 'CIRCULATION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CirculationAnswer',
            fields=[
                ('circulation_answer_id', models.AutoField(db_column='CIRCULATION_ANSWER_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'db_table': 'CIRCULATION_ANSWER',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CirculationAnswerType',
            fields=[
                ('circulation_answer_type_id', models.AutoField(db_column='CIRCULATION_ANSWER_TYPE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
            ],
            options={
                'db_table': 'CIRCULATION_ANSWER_TYPE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CirculationLog',
            fields=[
                ('circulation_log_id', models.AutoField(db_column='CIRCULATION_LOG_ID', primary_key=True, serialize=False)),
                ('id', models.IntegerField(db_column='ID')),
                ('user_id', models.IntegerField(db_column='USER_ID')),
                ('action', models.CharField(db_column='ACTION', max_length=500)),
                ('data', models.TextField(blank=True, db_column='DATA', null=True)),
                ('modification_date', models.DateTimeField(db_column='MODIFICATION_DATE')),
            ],
            options={
                'db_table': 'CIRCULATION_LOG',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CirculationReason',
            fields=[
                ('circulation_reason_id', models.AutoField(db_column='CIRCULATION_REASON_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'db_table': 'CIRCULATION_REASON',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CirculationState',
            fields=[
                ('circulation_state_id', models.AutoField(db_column='CIRCULATION_STATE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=100)),
                ('sort', models.IntegerField(db_column='SORT')),
            ],
            options={
                'db_table': 'CIRCULATION_STATE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CirculationType',
            fields=[
                ('circulation_type_id', models.AutoField(db_column='CIRCULATION_TYPE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=50)),
                ('parent_specific_activations', models.PositiveSmallIntegerField(db_column='PARENT_SPECIFIC_ACTIVATIONS')),
            ],
            options={
                'db_table': 'CIRCULATION_TYPE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CommissionAssignment',
            fields=[
                ('commission_assignment_id', models.AutoField(db_column='COMMISSION_ASSIGNMENT_ID', primary_key=True, serialize=False)),
                ('adder_id', models.FloatField(db_column='ADDER_ID')),
                ('date', models.DateTimeField(db_column='DATE')),
            ],
            options={
                'db_table': 'COMMISSION_ASSIGNMENT',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DocgenActivationAction',
            fields=[
                ('docgen_activation_action_id', models.AutoField(db_column='DOCGEN_ACTIVATION_ACTION_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=255)),
            ],
            options={
                'db_table': 'DOCGEN_ACTIVATION_ACTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DocgenActivationactionAction',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'DOCGEN_ACTIVATIONACTION_ACTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DocgenActivationDocket',
            fields=[
                ('docgen_activation_docket_id', models.AutoField(db_column='DOCGEN_ACTIVATION_DOCKET_ID', primary_key=True, serialize=False)),
                ('text', models.TextField(db_column='TEXT')),
            ],
            options={
                'db_table': 'DOCGEN_ACTIVATION_DOCKET',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DocgenDocxAction',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'DOCGEN_DOCX_ACTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DocgenPdfAction',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'DOCGEN_PDF_ACTION',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DocgenTemplate',
            fields=[
                ('docgen_template_id', models.AutoField(db_column='DOCGEN_TEMPLATE_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=255)),
                ('path', models.CharField(db_column='PATH', max_length=255)),
                ('type', models.FloatField(db_column='TYPE')),
            ],
            options={
                'db_table': 'DOCGEN_TEMPLATE',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DocgenTemplateClass',
            fields=[
                ('docgen_template_class_id', models.AutoField(db_column='DOCGEN_TEMPLATE_CLASS_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=255)),
                ('path', models.CharField(db_column='PATH', max_length=255)),
                ('type', models.FloatField(db_column='TYPE')),
            ],
            options={
                'db_table': 'DOCGEN_TEMPLATE_CLASS',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FormGroup',
            fields=[
                ('form_group_id', models.AutoField(db_column='FORM_GROUP_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=500)),
                ('description', models.CharField(blank=True, db_column='DESCRIPTION', max_length=1000, null=True)),
            ],
            options={
                'db_table': 'FORM_GROUP',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FormGroupForm',
            fields=[
                ('id', models.AutoField(db_column='ID', primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'FORM_GROUP_FORM',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GlossaryCategory',
            fields=[
                ('glossary_category_id', models.AutoField(db_column='GLOSSARY_CATEGORY_ID', primary_key=True, serialize=False)),
                ('name', models.CharField(db_column='NAME', max_length=80)),
                ('role_id', models.FloatField(blank=True, db_column='ROLE_ID', null=True)),
                ('service_id', models.FloatField(blank=True, db_column='SERVICE_ID', null=True)),
                ('user_id', models.FloatField(blank=True, db_column='USER_ID', null=True)),
            ],
            options={
                'db_table': 'GLOSSARY_CATEGORY',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GlossarySentence',
            fields=[
                ('glossary_sentence_id', models.AutoField(db_column='GLOSSARY_SENTENCE_ID', primary_key=True, serialize=False)),
                ('glossary_category_id', models.FloatField(db_column='GLOSSARY_CATEGORY_ID')),
                ('title', models.CharField(db_column='TITLE', max_length=500)),
                ('sentence', models.CharField(db_column='SENTENCE', max_length=4000)),
                ('role_id', models.FloatField(blank=True, db_column='ROLE_ID', null=True)),
                ('service_id', models.FloatField(blank=True, db_column='SERVICE_ID', null=True)),
                ('user_id', models.FloatField(blank=True, db_column='USER_ID', null=True)),
            ],
            options={
                'db_table': 'GLOSSARY_SENTENCE',
                'managed': True,
            },
        ),
    ]
